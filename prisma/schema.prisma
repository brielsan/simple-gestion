generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  email      String     @unique @db.VarChar(255)
  password   String     @db.VarChar(255)
  username   String     @db.VarChar(50)
  testmode   Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  movements  Movement[]
  advices    Advice[]

  @@map("users")
}

model Category {
  id         String     @id @default(cuid())
  name       String     @unique @db.VarChar(100)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  movements  Movement[]

  @@map("categories")
}

model Type {
  id         String     @id @default(cuid())
  name       String     @unique @db.VarChar(100)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  movements  Movement[]

  @@map("types")
}

model Movement {
  id          String   @id @default(cuid())
  description String   @db.VarChar(500)
  amount      Float
  date        DateTime @default(now())
  deleted     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  typeId     String
  type       Type     @relation(fields: [typeId], references: [id], onDelete: Cascade)

  @@map("movements")
  @@index([description])
  @@index([date])
}

model Advice {
  id                String   @id @default(cuid())
  content           String   @db.Text
  isSystemGenerated Boolean  @default(false)
  deleted           Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("advices")
}
